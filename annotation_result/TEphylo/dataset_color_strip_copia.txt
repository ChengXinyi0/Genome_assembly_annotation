DATASET_COLORSTRIP
#In colored strip datasets, each ID is associated to a color box/strip and can have an optional label. Color can be specified in hexadecimal, RGB or RGBA notation. When using RGB or RGBA notation, you cannot use COMMA as the dataset separator

#lines starting with a hash are comments and ignored during parsing

#=================================================================#
#                    MANDATORY SETTINGS                           #
#=================================================================#
#select the separator which is used to delimit the data below (TAB,SPACE or COMMA).This separator must be used throughout this file.

#SEPARATOR TAB
#SEPARATOR COMMA
SEPARATOR SPACE

#label is used in the legend table (can be changed later)
DATASET_LABEL label1

#dataset color (can be changed later)
COLOR #ff0000

#=================================================================#
#                    OPTIONAL SETTINGS                            #
#=================================================================#

#If COLOR_BRANCHES is set to 1, branches of the tree will be colored according to the colors of the strips above the leaves.
#When all children of a node have the same color, it will be colored the same, ie. the color will propagate inwards towards the root.
COLOR_BRANCHES 0


#=================================================================#
#     all other optional settings can be set or changed later     #
#           in the web interface (under 'Datasets' tab)           #
#=================================================================#

#Each dataset can have a legend, which is defined using LEGEND_XXX fields below
#For each row in the legend, there should be one shape, color and label.
#Optionally, you can define an exact legend position using LEGEND_POSITION_X and LEGEND_POSITION_Y. To use automatic legend positioning, do NOT define these values
#Optionally, shape scaling can be present (LEGEND_SHAPE_SCALES). For each shape, you can define a scaling factor between 0 and 1.
#To order legend entries horizontally instead of vertically, set LEGEND_HORIZONTAL to 1
#Shape should be a number between 1 and 6, or any protein domain shape definition.
#1: square
#2: circle
#3: star
#4: right pointing triangle
#5: left pointing triangle
#6: checkmark

#LEGEND_TITLE Dataset_legend
#LEGEND_POSITION_X 100
#LEGEND_POSITION_Y 100
#LEGEND_HORIZONTAL 0
#LEGEND_SHAPES 1 1 2 2
#LEGEND_COLORS #ff0000 #00ff00 rgba(0,255,0,0.5) #0000ff
#LEGEND_LABELS value1 value2 value3 value4
#LEGEND_SHAPE_SCALES 1 1 0.5 1

#width of the colored strip
#STRIP_WIDTH 25

#left margin, used to increase/decrease the spacing to the next dataset. Can be negative, causing datasets to overlap.
#MARGIN 0

#border width; if set above 0, a border of specified width (in pixels) will be drawn around the color strip 
#BORDER_WIDTH 0

#border color; used when BORDER_WIDTH is above 0
#BORDER_COLOR #0000ff

#if set to 1, border will be drawn completely around each colored strip box
#COMPLETE_BORDER 0

#always show internal values; if set, values associated to internal nodes will be displayed even if these nodes are not collapsed. It could cause overlapping in the dataset display.
#SHOW_INTERNAL 0


#display or hide the individual label inside each colored strip (when defined in the data below)
#SHOW_STRIP_LABELS 1

#position of the strip label within the box; 'top', 'center' or 'bottom'
#STRIP_LABEL_POSITION center

#strip label size factor (relative to the tree leaf labels)
#STRIP_LABEL_SIZE_FACTOR 1


#rotation of the strip labels; used only in rectangular tree display mode
#STRIP_LABEL_ROTATION 0

#strip label shift in pixels (positive or negative)
#STRIP_LABEL_SHIFT 0

#STRIP_LABEL_COLOR #000000

#draw a black outline around the text (width in pixels)
#STRIP_LABEL_OUTLINE 0.5

#display or hide the dataset label above the colored strip
#SHOW_LABELS 1

#dataset label size factor
#SIZE_FACTOR 1

#dataset label rotation
#LABEL_ROTATION 0

#dataset label shift in pixels (positive or negative)
#LABEL_SHIFT 0

#Internal tree nodes can be specified using IDs directly, or using the 'last common ancestor' method described in iTOL help pages

#=================================================================#
#       Actual data follows after the "DATA" keyword              #
#=================================================================#
DATA

#TE_family hex_color_code Clade
TE_00000254_INT#LTR/Copia #DE3163 Ivana
TE_00000256_INT#LTR/Copia #DE3163 Ivana
TE_00000268_INT#LTR/Copia #1DACD6 Ale
TE_00000283_INT#LTR/Copia #1DACD6 Ale
TE_00000290_INT#LTR/Copia #1DACD6 Ale
TE_00000294_INT#LTR/Copia #00FF00 Tork
TE_00000304_INT#LTR/Copia #FFFF00 SIRE
TE_00000305_INT#LTR/Copia #DE3163 Ivana
TE_00000338_INT#LTR/Copia #1DACD6 Ale
TE_00000347_INT#LTR/Copia #9925BE TAR
TE_00000354_INT#LTR/Copia #1DACD6 Ale
TE_00000359_INT#LTR/Copia #00FF00 Tork
TE_00000470_INT#LTR/Copia #00FF00 Tork
TE_00000474_INT#LTR/Copia #1DACD6 Ale
TE_00000499_INT#LTR/Copia #00FF00 Tork
TE_00000505_INT#LTR/Copia #00FF00 Tork
TE_00000512_INT#LTR/Copia #DE3163 Ivana
TE_00000514_INT#LTR/Copia #00FF00 Tork
TE_00000515_INT#LTR/Copia #1DACD6 Ale
TE_00000525_INT#LTR/Copia #FFFF00 SIRE
TE_00000533_INT#LTR/Copia #C6E2FF Bianca
TE_00000541_INT#LTR/Copia #DE3163 Ivana
TE_00000548_INT#LTR/Copia #1DACD6 Ale
TE_00000553_INT#LTR/Copia #DE3163 Ivana
TE_00000592_INT#LTR/Copia #00FF00 Tork
TE_00000612_INT#LTR/Copia #00FF00 Tork
TE_00000620_INT#LTR/Copia #1DACD6 Ale
TE_00000633_INT#LTR/Copia #FFFF00 SIRE
TE_00000644_INT#LTR/Copia #FFFF00 SIRE
TE_00000669_INT#LTR/Copia #1DACD6 Ale
TE_00000698_INT#LTR/Copia #DE3163 Ivana
TE_00000730_INT#LTR/Copia #1DACD6 Ale
TE_00000742_INT#LTR/Copia #1DACD6 Ale
TE_00000749_INT#LTR/Copia #DE3163 Ivana
TE_00000768_INT#LTR/Copia #1DACD6 Ale
TE_00000806_INT#LTR/Copia #1DACD6 Ale
TE_00000843_INT#LTR/Copia #FFFF00 SIRE
TE_00000848_INT#LTR/Copia #1DACD6 Ale
TE_00000849_INT#LTR/Copia #1DACD6 Ale
TE_00000857_INT#LTR/Copia #1DACD6 Ale
TE_00000894_INT#LTR/Copia #1DACD6 Ale
TE_00000921_INT#LTR/Copia #1DACD6 Ale
TE_00000922_INT#LTR/Copia #1DACD6 Ale
TE_00000952_INT#LTR/Copia #00FF00 Tork
TE_00000957_INT#LTR/Copia #00FF00 Tork
TE_00000963_INT#LTR/Copia #1DACD6 Ale
TE_00000968_INT#LTR/Copia #00FF00 Tork
TE_00000977_INT#LTR/Copia #1DACD6 Ale
TE_00001022_INT#LTR/Copia #1DACD6 Ale
TE_00001024_INT#LTR/Copia #00FF00 Tork
TE_00001027_INT#LTR/Copia #1DACD6 Ale
TE_00001041_INT#LTR/Copia #00FF00 Tork
TE_00001042_INT#LTR/Copia #1DACD6 Ale
TE_00001048_INT#LTR/Copia #856F53 mixture
TE_00001068_INT#LTR/Copia #1DACD6 Ale
TE_00001101_INT#LTR/Copia #1DACD6 Ale
TE_00001125_INT#LTR/Copia #C6E2FF Bianca
TE_00001134_INT#LTR/Copia #00FF00 Tork
TE_00001150_INT#LTR/Copia #FFFF00 SIRE
TE_00001155_INT#LTR/Copia #FFFF00 SIRE
TE_00001160_INT#LTR/Copia #1DACD6 Ale
TE_00001162_INT#LTR/Copia #1DACD6 Ale
TE_00001165_INT#LTR/Copia #00FF00 Tork
TE_00001216_INT#LTR/Copia #1DACD6 Ale
TE_00001256_INT#LTR/Copia #DE3163 Ivana
TE_00001258_INT#LTR/Copia #00FF00 Tork
TE_00001259_INT#LTR/Copia #DE3163 Ivana
TE_00001313_INT#LTR/Copia #1DACD6 Ale
TE_00001329_INT#LTR/Copia #1DACD6 Ale
TE_00001350_INT#LTR/Copia #DE3163 Ivana
TE_00001351_INT#LTR/Copia #1DACD6 Ale
TE_00001356_INT#LTR/Copia #1DACD6 Ale
TE_00001373_INT#LTR/Copia #1DACD6 Ale
TE_00001377_INT#LTR/Copia #BBCCDD Angela
TE_00001380_INT#LTR/Copia #DE3163 Ivana
TE_00001388_INT#LTR/Copia #C6E2FF Bianca
TE_00001446_INT#LTR/Copia #1DACD6 Ale
TE_00001467_INT#LTR/Copia #1DACD6 Ale
TE_00001483_INT#LTR/Copia #00FF00 Tork
TE_00001549_INT#LTR/Copia #1DACD6 Ale
TE_00001555_INT#LTR/Copia #1DACD6 Ale
TE_00001613_INT#LTR/Copia #DE3163 Ivana
TE_00001618_INT#LTR/Copia #1DACD6 Ale
TE_00001639_INT#LTR/Copia #1DACD6 Ale
TE_00001654_INT#LTR/Copia #FFFF00 SIRE
TE_00001677_INT#LTR/Copia #1DACD6 Ale
TE_00001723_INT#LTR/Copia #1DACD6 Ale
TE_00000585_INT#LTR/Copia #000000 unknown

#Examples:
#assign a red colored strip to leaf 9606, with label 'Human'
#9606 #ff0000 Human

#assign a green, semi-transparent (alpha 0.5) strip to an internal node, without any label. If 'Show internal values' is set to 'No', this will only be displayed if the node is collapsed. 
#9606|5664 rgba(0,255,0,0.5)

